---
- name: Check visudo exists
  stat:
    path: /usr/sbin/visudo
  register: visudo

- name: Allow admin group sudo without password
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^%admin ALL="
    line: "%admin ALL=(ALL) NOPASSWD: ALL"
    validate: "/usr/sbin/visudo -cf %s"
  when: visudo.stat.exists
  tags: ["users", "groups", "configuration"]

- name: Creating groups
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.gid | default(omit) }}"
  with_items: "{{ groups_to_create }}"
  tags: ["users", "groups", "configuration"]

- name: Per-user group creation
  ansible.builtin.group:
    name: "{{ item.username }}"
    gid: "{{ item.gid | default(item.uid) | default(omit) }}"
  with_items: "{{ users }}"
  when: "'group' not in item and users_create_per_user_group"
  tags: ["users", "configuration"]

- name: User creation
  ansible.builtin.user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    # empty string removes user from all secondary groups
    groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
    append: "{{ item.append | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    # putting a a '!' in front of the encrypted password effectively
    # disables the password. See also `usermod -L`
    password: "{{ item.password if item.password is defined else '!' }}"
    comment: "{{ item.name if item.name is defined else '' }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default('/home/' + item.username)  }}"
    create_home: "{{ 'yes' if users_create_homedirs else 'no' }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit)  }}"
    update_password: "{{ item.update_password | default(omit) }}"
    system: "{{ item.is_system_user | default(omit) | bool or omit }}"
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

# Ubuntu <21.04 will set, by default, user's home mode to 0755
# (effectively allowing all users to read private files).
# https://discourse.ubuntu.com/t/private-home-directories-for-ubuntu-21-04-onwards/19533
# However, some systems need access to user's home files in order to work, e.g. fix via:
#   setfacl -m u:libvirt-qemu:rx ${HOME}
- name: ensure home folder is secured
  ansible.builtin.file:
    path: "{{ item.home | default('/home/' + item.username)  }}"
    state: directory
    mode: 0700
  with_items: "{{ users }}"
  when: users_create_homedirs
  tags: ["users", "configuration"]

- name: SSH keys
  authorized_key:
    user: "{{ item.0.username }}"
    # https://docs.ansible.com/ansible/2.9/modules/authorized_key_module.html#examples
    key: "{{ item.1 }}"
    path: "{{ item.0.home | default('/home/' + item.0.username) }}/{{ authorized_keys_file }}"
    # use `exclusive: True` to allow only latest authorized key, would remove all previous authorized keys.
    # exclusive: True
  with_subelements:
    - "{{ users }}"
    - ssh_key
    - skip_missing: true
  tags: ["users", "configuration"]

- name: Setup user profiles
  blockinfile:
    block: "{{ item.profile }}"
    dest: "{{ item.home | default('/home/' + item.username) }}/.profile"
    owner: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    mode: 0644
    create: true
  when: users_create_homedirs and item.profile is defined
  with_items: "{{ users }}"

- name: Deleted user removal
  ansible.builtin.user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  with_items: "{{ users_deleted }}"
  tags: ["users", "configuration"]

- name: Deleted per-user group removal
  ansible.builtin.group:
    name: "{{ item.username }}"
    state: absent
  with_items: "{{ users_deleted }}"
  when: users_create_per_user_group
  tags: ["users", "configuration"]

- name: Deleted group removal
  ansible.builtin.group:
    name: "{{ item.group_name }}"
    gid: "{{ item.gid | default(omit) }}"
    state: absent
  with_items: "{{ groups_deleted }}"
  tags: ["users", "groups", "configuration"]
